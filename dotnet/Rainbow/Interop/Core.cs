// This file was generated by Rainbow for .NET Core. Do not modify.
//
// Copyright (c) 2010-present Bifrost Entertainment AS and Tommy Nguyen
// Distributed under the MIT License.
// (See accompanying file LICENSE or copy at http://opensource.org/licenses/MIT)

namespace Rainbow.Interop
{
    using System;
    using System.Runtime.InteropServices;

    using Graphics;

    internal static class Core
    {
        private const string RainbowCore = @"rainbow.exe";

        [DllImport(RainbowCore, EntryPoint = @"rainbow_animation_create")]
        public static extern IntPtr AnimationCreate(IntPtr p, uint sprite_id, uint[] frames, uint frame_count, uint fps, int delay);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_animation_release")]
        public static extern void AnimationRelease(IntPtr p);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_animation_current_frame")]
        public static extern uint AnimationCurrentFrame(IntPtr p);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_animation_frame_rate")]
        public static extern uint AnimationFrameRate(IntPtr p);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_animation_is_stopped")]
        public static extern bool AnimationIsStopped(IntPtr p);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_animation_set_delay")]
        public static extern void AnimationSetDelay(IntPtr p, int delay);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_animation_set_event_handler")]
        public static extern void AnimationSetEventHandler(IntPtr animation, [MarshalAs(UnmanagedType.FunctionPtr)] AnimationEventHandler handler, IntPtr context);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_animation_set_frame_rate")]
        public static extern void AnimationSetFrameRate(IntPtr p, uint frame_rate);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_animation_set_frames")]
        public static extern void AnimationSetFrames(IntPtr p, uint[] frames, uint count);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_animation_set_sprite")]
        public static extern void AnimationSetSprite(IntPtr p, IntPtr q, uint sprite_id);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_animation_jump_to")]
        public static extern void AnimationJumpTo(IntPtr p, uint frame);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_animation_start")]
        public static extern void AnimationStart(IntPtr p);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_animation_stop")]
        public static extern void AnimationStop(IntPtr p);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_audio_load_sound")]
        public static extern IntPtr AudioLoadSound([MarshalAs(UnmanagedType.LPUTF8Str)] string path);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_audio_load_stream")]
        public static extern IntPtr AudioLoadStream([MarshalAs(UnmanagedType.LPUTF8Str)] string path);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_audio_release")]
        public static extern void AudioRelease(IntPtr sound);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_audio_is_paused")]
        public static extern bool AudioIsPaused(IntPtr p);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_audio_is_playing")]
        public static extern bool AudioIsPlaying(IntPtr p);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_audio_set_loop_count")]
        public static extern void AudioSetLoopCount(IntPtr p, int count);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_audio_set_volume")]
        public static extern void AudioSetVolume(IntPtr p, float volume);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_audio_set_world_position")]
        public static extern void AudioSetWorldPosition(IntPtr p, Vector2 position);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_audio_pause")]
        public static extern void AudioPause(IntPtr p);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_audio_play_channel")]
        public static extern IntPtr AudioPlayChannel(IntPtr p);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_audio_play_sound")]
        public static extern IntPtr AudioPlaySound(IntPtr p, Vector2 world_position);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_audio_stop")]
        public static extern void AudioStop(IntPtr p);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_fontatlas_create")]
        public static extern IntPtr FontAtlasCreate([MarshalAs(UnmanagedType.LPUTF8Str)] string path, float point_size);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_fontatlas_release")]
        public static extern void FontAtlasRelease(IntPtr p);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_fontatlas_height")]
        public static extern int FontAtlasHeight(IntPtr p);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_fontatlas_is_valid")]
        public static extern bool FontAtlasIsValid(IntPtr p);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_label_create")]
        public static extern IntPtr LabelCreate();

        [DllImport(RainbowCore, EntryPoint = @"rainbow_label_release")]
        public static extern void LabelRelease(IntPtr p);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_label_alignment")]
        public static extern TextAlignment LabelAlignment(IntPtr p);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_label_angle")]
        public static extern float LabelAngle(IntPtr p);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_label_color")]
        public static extern Color LabelColor(IntPtr p);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_label_position")]
        public static extern Vector2 LabelPosition(IntPtr p);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_label_scale")]
        public static extern float LabelScale(IntPtr p);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_label_width")]
        public static extern int LabelWidth(IntPtr p);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_label_set_alignment")]
        public static extern void LabelSetAlignment(IntPtr p, TextAlignment q);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_label_set_color")]
        public static extern void LabelSetColor(IntPtr p, Color color);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_label_set_font")]
        public static extern void LabelSetFont(IntPtr p, IntPtr q);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_label_set_position")]
        public static extern void LabelSetPosition(IntPtr p, Vector2 position);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_label_set_rotation")]
        public static extern void LabelSetRotation(IntPtr p, float angle);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_label_set_scale")]
        public static extern void LabelSetScale(IntPtr p, float scale);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_label_set_text")]
        public static extern void LabelSetText(IntPtr p, [MarshalAs(UnmanagedType.LPUTF8Str)] string text);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_renderqueue_add_animation")]
        public static extern int RenderQueueAddAnimation(IntPtr queue, IntPtr p, [MarshalAs(UnmanagedType.LPUTF8Str)] string tag);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_renderqueue_add_label")]
        public static extern int RenderQueueAddLabel(IntPtr queue, IntPtr p, [MarshalAs(UnmanagedType.LPUTF8Str)] string tag);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_renderqueue_add_spritebatch")]
        public static extern int RenderQueueAddSpriteBatch(IntPtr queue, IntPtr p, [MarshalAs(UnmanagedType.LPUTF8Str)] string tag);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_renderqueue_insert_animation")]
        public static extern int RenderQueueInsertAnimation(IntPtr queue, int index, IntPtr p, [MarshalAs(UnmanagedType.LPUTF8Str)] string tag);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_renderqueue_insert_label")]
        public static extern int RenderQueueInsertLabel(IntPtr queue, int index, IntPtr p, [MarshalAs(UnmanagedType.LPUTF8Str)] string tag);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_renderqueue_insert_spritebatch")]
        public static extern int RenderQueueInsertSpriteBatch(IntPtr queue, int index, IntPtr p, [MarshalAs(UnmanagedType.LPUTF8Str)] string tag);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_renderqueue_clear")]
        public static extern void RenderQueueClear(IntPtr queue);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_renderqueue_disable")]
        public static extern void RenderQueueDisable(IntPtr queue, int index);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_renderqueue_disable_tag")]
        public static extern void RenderQueueDisableTag(IntPtr queue, [MarshalAs(UnmanagedType.LPUTF8Str)] string tag);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_renderqueue_enable")]
        public static extern void RenderQueueEnable(IntPtr queue, int index);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_renderqueue_enable_tag")]
        public static extern void RenderQueueEnableTag(IntPtr queue, [MarshalAs(UnmanagedType.LPUTF8Str)] string tag);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_renderqueue_remove_at")]
        public static extern void RenderQueueRemoveAt(IntPtr queue, int index);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_renderqueue_remove")]
        public static extern void RenderQueueRemove(IntPtr queue, [MarshalAs(UnmanagedType.LPUTF8Str)] string tag);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_renderqueue_set_tag")]
        public static extern void RenderQueueSetTag(IntPtr queue, int index, [MarshalAs(UnmanagedType.LPUTF8Str)] string tag);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_sprite_angle")]
        public static extern float SpriteAngle(IntPtr p, uint index);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_sprite_color")]
        public static extern Color SpriteColor(IntPtr p, uint index);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_sprite_height")]
        public static extern uint SpriteHeight(IntPtr p, uint index);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_sprite_id")]
        public static extern int SpriteId(IntPtr p, uint index);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_sprite_is_flipped")]
        public static extern bool SpriteIsFlipped(IntPtr p, uint index);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_sprite_is_hidden")]
        public static extern bool SpriteIsHidden(IntPtr p, uint index);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_sprite_is_mirrored")]
        public static extern bool SpriteIsMirrored(IntPtr p, uint index);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_sprite_pivot")]
        public static extern Vector2 SpritePivot(IntPtr p, uint index);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_sprite_position")]
        public static extern Vector2 SpritePosition(IntPtr p, uint index);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_sprite_scale")]
        public static extern Vector2 SpriteScale(IntPtr p, uint index);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_sprite_width")]
        public static extern uint SpriteWidth(IntPtr p, uint index);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_sprite_set_color")]
        public static extern void SpriteSetColor(IntPtr p, uint index, Color color);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_sprite_set_flipped")]
        public static extern void SpriteSetFlipped(IntPtr p, uint index, bool flip);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_sprite_set_id")]
        public static extern void SpriteSetId(IntPtr p, uint index, int id);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_sprite_set_mirrored")]
        public static extern void SpriteSetMirrored(IntPtr p, uint index, bool mirror);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_sprite_set_normal")]
        public static extern void SpriteSetNormal(IntPtr p, uint index, uint normal);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_sprite_set_pivot")]
        public static extern void SpriteSetPivot(IntPtr p, uint index, Vector2 pivot);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_sprite_set_position")]
        public static extern void SpriteSetPosition(IntPtr p, uint index, Vector2 position);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_sprite_set_rotation")]
        public static extern void SpriteSetRotation(IntPtr p, uint index, float angle);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_sprite_set_scale")]
        public static extern void SpriteSetScale(IntPtr p, uint index, Vector2 scale);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_sprite_set_texture")]
        public static extern void SpriteSetTexture(IntPtr p, uint index, uint texture);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_sprite_hide")]
        public static extern void SpriteHide(IntPtr p, uint index);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_sprite_show")]
        public static extern void SpriteShow(IntPtr p, uint index);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_spritebatch_create")]
        public static extern IntPtr SpriteBatchCreate(uint size);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_spritebatch_release")]
        public static extern void SpriteBatchRelease(IntPtr p);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_spritebatch_is_visible")]
        public static extern bool SpriteBatchIsVisible(IntPtr p);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_spritebatch_size")]
        public static extern uint SpriteBatchSize(IntPtr p);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_spritebatch_set_normal")]
        public static extern void SpriteBatchSetNormal(IntPtr p, IntPtr q);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_spritebatch_set_texture")]
        public static extern void SpriteBatchSetTexture(IntPtr p, IntPtr q);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_spritebatch_set_visible")]
        public static extern void SpriteBatchSetVisible(IntPtr p, bool visible);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_spritebatch_bring_to_front")]
        public static extern void SpriteBatchBringToFront(IntPtr p, uint index);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_spritebatch_clear")]
        public static extern void SpriteBatchClear(IntPtr p);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_spritebatch_create_sprite")]
        public static extern uint SpriteBatchCreateSprite(IntPtr p, uint width, uint height);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_spritebatch_erase")]
        public static extern void SpriteBatchErase(IntPtr p, uint index);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_spritebatch_find_sprite_by_id")]
        public static extern uint SpriteBatchFindSpriteById(IntPtr p, int id);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_spritebatch_move")]
        public static extern void SpriteBatchMove(IntPtr p, Vector2 distance);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_spritebatch_swap")]
        public static extern void SpriteBatchSwap(IntPtr p, uint i, uint j);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_textureatlas_create")]
        public static extern IntPtr TextureAtlasCreate([MarshalAs(UnmanagedType.LPUTF8Str)] string path, float scale);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_textureatlas_release")]
        public static extern void TextureAtlasRelease(IntPtr p);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_textureatlas_height")]
        public static extern int TextureAtlasHeight(IntPtr p);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_textureatlas_is_valid")]
        public static extern bool TextureAtlasIsValid(IntPtr p);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_textureatlas_width")]
        public static extern int TextureAtlasWidth(IntPtr p);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_textureatlas_add_region")]
        public static extern uint TextureAtlasAddRegion(IntPtr p, int x, int y, int width, int height);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_textureatlas_get_texture_region")]
        public static extern uint TextureAtlasGetTextureRegion(IntPtr p, uint index);

        [DllImport(RainbowCore, EntryPoint = @"rainbow_textureatlas_set_regions")]
        public static extern void TextureAtlasSetRegions(IntPtr p, int[] rectangles, int count);
    }
}
